# Code generated by ChatGPT

# python

import subprocess
import os

# Define versions for reproducibility
FLYE_VERSION = "2.8.1"
MINIMAP2_VERSION = "2.17"
FREEBAYES_VERSION = "1.3.2"


# Error handling function for subprocess calls
def run_command(command):
    try:
        subprocess.check_call(command, shell=True)
    except subprocess.CalledProcessError as e:
        print(f"Command '{command}' failed with exit status {e.returncode}")
        exit(1)


# Step 1: Assemble reads using Flye
def assemble_reads(input_reads, output_directory):
    flye_command = (
        f"flye --nano-raw {input_reads} --out-dir {output_directory} --threads 4"
    )
    run_command(flye_command)


# Step 2: Align contigs using Minimap2
def align_contigs(contigs, reference_genome, output_sam):
    minimap2_command = (
        f"minimap2 -ax map-ont {reference_genome} {contigs} > {output_sam}"
    )
    run_command(minimap2_command)


# Step 3: Variant calling with FreeBayes
def call_variants(reference_genome, input_bam, output_vcf):
    freebayes_command = f"freebayes -f {reference_genome} {input_bam} > {output_vcf}"
    run_command(freebayes_command)


# Main pipeline execution
# Define file paths
reads = "input_reads.fasta"
assembly_output = "assembly_output"
aligned_sam = "aligned_reads.sam"
reference_genome = "reference_genome.fasta"
aligned_bam = "aligned_reads.bam"
output_vcf = "variants.vcf"

# Ensure output directories exist
os.makedirs(assembly_output, exist_ok=True)

# Run the pipeline
assemble_reads(reads, assembly_output)
align_contigs(f"{assembly_output}/assembly.fasta", reference_genome, aligned_sam)

# Convert SAM to BAM for FreeBayes input
run_command(f"samtools view -bS {aligned_sam} > {aligned_bam}")
run_command(f"samtools sort {aligned_bam} -o {aligned_bam}")

call_variants(reference_genome, aligned_bam, output_vcf)
