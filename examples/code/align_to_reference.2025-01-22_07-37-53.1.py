# Code generated by ChatGPT

# python

# Required Libraries
# Install necessary tools via conda or package managers for environment:
# conda install -c bioconda canu flye minimap2 bwa freebayes gatk

import subprocess
import os


# Assembly step using Canu or Flye (Considered for long nanopore reads)
def assemble_reads(input_reads, output_directory, assembler="canu"):
    try:
        os.makedirs(output_directory, exist_ok=True)
        command = f"{assembler} -p assembly -d {output_directory} {input_reads}"
        subprocess.run(command, check=True, shell=True)
    except Exception as e:
        print(f"Error in assembly: {e}")


# Alignment step using Minimap2 or BWA
def align_to_reference(assembled_contigs, reference_genome, output_sam):
    try:
        command = f"minimap2 -ax map-ont {reference_genome} {assembled_contigs} > {output_sam}"
        subprocess.run(command, check=True, shell=True)
    except Exception as e:
        print(f"Error in alignment: {e}")


# Variant calling step using FreeBayes or GATK
def call_variants(output_sam, reference_genome, output_vcf, caller="freebayes"):
    try:
        command = f"{caller} -f {reference_genome} {output_sam} > {output_vcf}"
        subprocess.run(command, check=True, shell=True)
    except Exception as e:
        print(f"Error in variant calling: {e}")


# Example run of the pipeline:
input_reads = "nanopore_reads.fastq"
reference_genome = "reference_genome.fasta"
output_directory = "assembly_output"
output_sam = "alignment.sam"
output_vcf = "variants.vcf"

# Assemble the reads
assemble_reads(input_reads, output_directory)

# Align to reference
align_to_reference(
    os.path.join(output_directory, "assembly.contigs.fasta"),
    reference_genome,
    output_sam,
)

# Call variants
call_variants(output_sam, reference_genome, output_vcf)
