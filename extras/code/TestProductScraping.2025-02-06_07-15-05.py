# Code generated by gpt-4o-mini

import unittest
from unittest.mock import patch, Mock
from your_script_name import fetch_product_data, scrape_products  # Replace with your script name
import pandas as pd

class TestProductScraping(unittest.TestCase):
    """Unit tests for product scraping functions."""

    @patch('your_script_name.requests.get')  # Replace with your script name
    def test_fetch_product_data_success(self, mock_get):
        """Test successful data fetching."""
        # Mock the response
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.content = '''
        <html>
            <h1 class="product-title">Test Product</h1>
            <span class="product-price">$19.99</span>
            <div class="product-description">This is a test product.</div>
            <span class="product-rating">4.5</span>
        </html>
        '''
        mock_get.return_value = mock_response
        
        expected_data = {
            'name': 'Test Product',
            'price': '$19.99',
            'description': 'This is a test product.',
            'rating': '4.5'
        }
        
        result = fetch_product_data("https://example.com/product")
        self.assertEqual(result, expected_data)

    @patch('your_script_name.requests.get')  # Replace with your script name
    def test_fetch_product_data_missing_rating(self, mock_get):
        """Test data fetching when the rating is missing."""
        # Mock the response
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.content = '''
        <html>
            <h1 class="product-title">Test Product 2</h1>
            <span class="product-price">$9.99</span>
            <div class="product-description">This product has no rating.</div>
        </html>
        '''
        mock_get.return_value = mock_response
        
        expected_data = {
            'name': 'Test Product 2',
            'price': '$9.99',
            'description': 'This product has no rating.',
            'rating': None
        }
        
        result = fetch_product_data("https://example.com/product2")
        self.assertEqual(result, expected_data)

    @patch('your_script_name.requests.get')  # Replace with your script name
    def test_fetch_product_data_invalid_url(self, mock_get):
        """Test data fetching when a network error occurs."""
        mock_get.side_effect = requests.exceptions.RequestException("Network error.")
        
        result = fetch_product_data("https://example.com/invalid")
        self.assertIsNone(result)

    @patch('your_script_name.requests.get')  # Replace with your script name
    def test_scrape_products_success(self, mock_get):
        """Test the overall scraping process for a list of product URLs."""
        # Mock the first product response
        mock_response1 = Mock()
        mock_response1.status_code = 200
        mock_response1.content = '''
        <html>
            <h1 class="product-title">Product A</h1>
            <span class="product-price">$29.99</span>
            <div class="product-description">Description A</div>
            <span class="product-rating">4.0</span>
        </html>
        '''
        mock_get.return_value = mock_response1
        
        # Mock the second product response
        mock_response2 = Mock()
        mock_response2.status_code = 200
        mock_response2.content = '''
        <html>
            <h1 class="product-title">Product B</h1>
            <span class="product-price">$39.99</span>
            <div class="product-description">Description B</div>
        </html>
        '''
        mock_get.side_effect = [mock_response1, mock_response2]  # Success for first, success for second

        urls = [
            "https://example.com/productA",
            "https://example.com/productB"
        ]
        result_df = scrape_products(urls)
        expected_data = pd.DataFrame({
            'name': ['Product A', 'Product B'],
            'price': ['$29.99', '$39.99'],
            'description': ['Description A', 'Description B'],
            'rating': ['4.0', None]
        })

        pd.testing.assert_frame_equal(result_df.reset_index(drop=True), expected_data.reset_index(drop=True)

    @patch('your_script_name.requests.get')  # Replace with your script name
    def test_scrape_products_with_network_error(self, mock_get):
        """Test scraping when there is a network error for one of the products."""
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.content = '''
        <html>
            <h1 class="product-title">Product Valid</h1>
            <span class="product-price">$19.99</span>
            <div class="product-description">Description Valid</div>
            <span class="product-rating">5.0</span>
        </html>
        '''
        mock_get.side_effect = [mock_response, requests.exceptions.RequestException("Network error")]

        urls = [
            "https://example.com/validProduct",
            "https://example.com/invalidProduct"  # This will trigger a network error.
        ]
        result_df = scrape_products(urls)
        expected_data = pd.DataFrame({
            'name': ['Product Valid'],
            'price': ['$19.99'],
            'description': ['Description Valid'],
            'rating': ['5.0']
        })

        pd.testing.assert_frame_equal(result_df.reset_index(drop=True), expected_data.reset_index(drop=True))

if __name__ == '__main__':
    unittest.main()