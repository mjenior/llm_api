# Code generated by gpt-4o-mini

import unittest
from unittest.mock import patch, Mock
import pandas as pd
from your_module_name import can_scrape, fetch_product_data, scrape_products  # Adjust with actual module name

class TestWebScraper(unittest.TestCase):
    
    @patch('urllib.robotparser.RobotFileParser')
    def test_can_scrape_allowed(self, mock_robot_parser):
        """Test that can_scrape returns True when allowed."""
        mock_robot_parser.return_value.can_fetch.return_value = True
        self.assertTrue(can_scrape("https://example-ecommerce.com"))

    @patch('urllib.robotparser.RobotFileParser')
    def test_can_scrape_denied(self, mock_robot_parser):
        """Test that can_scrape returns False when denied."""
        mock_robot_parser.return_value.can_fetch.return_value = False
        self.assertFalse(can_scrape("https://example-ecommerce.com"))

    @patch('requests.get')
    def test_fetch_product_data_success(self, mock_get):
        """Test fetching product data is successful."""
        html_content = """
        <html>
        <body>
            <h1 class="product-name">Test Product</h1>
            <span class="product-price">$19.99</span>
            <div class="product-description">A great product!</div>
            <span class="product-rating">4.5 stars</span>
        </body>
        </html>
        """
        mock_get.return_value = Mock(status_code=200, text=html_content)
        
        expected_output = {
            "Name": "Test Product",
            "Price": "$19.99",
            "Description": "A great product!",
            "Rating": "4.5 stars"
        }

        result = fetch_product_data("https://example-ecommerce.com/product1")
        self.assertEqual(result, expected_output)

    @patch('requests.get')
    def test_fetch_product_data_missing_rating(self, mock_get):
        """Test fetch_product_data handles missing rating gracefully."""
        html_content = """
        <html>
        <body>
            <h1 class="product-name">Test Product</h1>
            <span class="product-price">$19.99</span>
            <div class="product-description">A great product!</div>
            <!-- Rating is omitted -->
        </body>
        </html>
        """
        mock_get.return_value = Mock(status_code=200, text=html_content)

        expected_output = {
            "Name": "Test Product",
            "Price": "$19.99",
            "Description": "A great product!",
            "Rating": "No rating"
        }

        result = fetch_product_data("https://example-ecommerce.com/product1")
        self.assertEqual(result, expected_output)

    @patch('requests.get')
    def test_fetch_product_data_network_error(self, mock_get):
        """Test fetch_product_data handles network errors gracefully."""
        mock_get.side_effect = requests.exceptions.RequestException("Network error")

        result = fetch_product_data("https://example-ecommerce.com/product1")
        self.assertIsNone(result)

    @patch('requests.get')
    def test_scrape_products(self, mock_get):
        """Test scrape_products aggregates data correctly into a DataFrame."""
        mock_get.side_effect = [
            Mock(status_code=200, text="""
                <html>
                <body>
                    <h1 class="product-name">Product A</h1>
                    <span class="product-price">$10.00</span>
                    <div class="product-description">Description A</div>
                    <span class="product-rating">4.0 stars</span>
                </body>
                </html>
            """),
            Mock(status_code=200, text="""
                <html>
                <body>
                    <h1 class="product-name">Product B</h1>
                    <span class="product-price">$12.50</span>
                    <div class="product-description">Description B</div>
                    <!-- no rating -->
                </body>
                </html>
            """),
        ]

        expected_df = pd.DataFrame({
            "Name": ["Product A", "Product B"],
            "Price": ["$10.00", "$12.50"],
            "Description": ["Description A", "Description B"],
            "Rating": ["4.0 stars", "No rating"]
        })

        result_df = scrape_products(["https://example-ecommerce.com/product1", "https://example-ecommerce.com/product2"])
        pd.testing.assert_frame_equal(result_df.reset_index(drop=True), expected_df.reset_index(drop=True)

if __name__ == '__main__':
    unittest.main()